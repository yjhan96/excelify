{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Excelify","text":"<p>Excelify is a DataFrame-like library that lets users create Excel spreadsheets.</p>"},{"location":"#installation","title":"Installation","text":"<p>The easiest way to install is via pip.</p> <pre><code>pip install excelify\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Check out Getting Started to learn the basic features of excelify.</p>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>ExcelFrame is a good place to start to look at the API documentation.</p>"},{"location":"display/","title":"ExcelFrame","text":""},{"location":"display/#excelify.display","title":"display","text":"<pre><code>display(\n    dfs: Sequence[tuple[ExcelFrame, tuple[int, int]]], sheet_styler: SheetStyler\n)\n</code></pre> <p>Display the ExcelFrames to excelify-viewer. This function must be called at the end of the script to display the tables.</p> <p>Parameters:</p> Name Type Description Default <code>dfs</code> <code>Sequence[tuple[ExcelFrame, tuple[int, int]]]</code> <p>Sequence of ExcelFrames and its starting positions, zero-indexed.</p> required <code>sheet_styler</code> <code>SheetStyler</code> <p>Sheet Styler. Used to modify sheet-wide formatting.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"excelframe/","title":"ExcelFrame","text":""},{"location":"excelframe/#excelify.ExcelFrame","title":"ExcelFrame","text":"<p>DataFrame-like object that allows referencing other cell's values lazily like an Excel spreadsheet.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame.empty(columns=[\"x\", \"y\"], height=2)\n&gt;&gt;&gt; df\nshape: (2, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |       |       |\n| 2 |       |       |\n+---+-------+-------+\n&gt;&gt;&gt; df = df.with_columns(\n...     el.lit([0, 1]).alias(\"x\"),\n...     el.col(\"x\").alias(\"y\"),\n... )\n&gt;&gt;&gt; df\nshape: (2, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |   0   |  A1   |\n| 2 |   1   |  A2   |\n+---+-------+-------+\n&gt;&gt;&gt; df.evaluate()\nshape: (2, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |   0   |   0   |\n| 2 |   1   |   1   |\n+---+-------+-------+\n\n</code></pre>"},{"location":"excelframe/#excelify.ExcelFrame.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: list[str]\n</code></pre> <p>List of column names in order.</p>"},{"location":"excelframe/#excelify.ExcelFrame.height","title":"height  <code>property</code>","text":"<pre><code>height: int\n</code></pre> <p>Height of the table.</p>"},{"location":"excelframe/#excelify.ExcelFrame.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, int]\n</code></pre> <p>Shape of the table.</p>"},{"location":"excelframe/#excelify.ExcelFrame.width","title":"width  <code>property</code>","text":"<pre><code>width: int\n</code></pre> <p>Width of the table.</p>"},{"location":"excelframe/#excelify.ExcelFrame.empty","title":"empty  <code>classmethod</code>","text":"<pre><code>empty(*, columns: Sequence[str], height: int) -&gt; ExcelFrame\n</code></pre> <p>Creates an empty table with given columns and height.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>list of columns</p> required <code>height</code> <code>int</code> <p>height of the table</p> required <p>Returns:</p> Type Description <code>ExcelFrame</code> <p>An empty ExcelFrame</p>"},{"location":"excelframe/#excelify.ExcelFrame.evaluate","title":"evaluate","text":"<pre><code>evaluate(inherit_style: bool = False) -&gt; ExcelFrame\n</code></pre> <p>Evaluate the table and return a new table with numerical values only.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame.empty(columns=[\"x\", \"x_times_two\"], height=2)\n&gt;&gt;&gt; df = df.with_columns(\n...         el.lit([1, 2]).alias(\"x\"),\n...         (el.col(\"x\") * 2).alias(\"x_times_two\"),\n...     )\n&gt;&gt;&gt; df.evaluate()\nshape: (2, 2)\n+---+-------+-----------------+\n|   | x (A) | x_times_two (B) |\n+---+-------+-----------------+\n| 1 |   1   |        2        |\n| 2 |   2   |        4        |\n+---+-------+-----------------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>inherit_style</code> <code>bool</code> <p>If True, the returned table will also inherit the style of the original table.</p> <code>False</code> <p>Returns:</p> Type Description <code>ExcelFrame</code> <p>A new ExcelFrame where each cell represents a computed value.</p>"},{"location":"excelframe/#excelify.ExcelFrame.select","title":"select","text":"<pre><code>select(columns: list[str]) -&gt; Self\n</code></pre> <p>Select a list of columns. It can also be used to reorder the columns.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2], \"y\": [4, 5]})\n&gt;&gt;&gt; df = df.with_columns((el.col(\"x\") + el.col(\"y\")).alias(\"z\"))\n&gt;&gt;&gt; df.select([\"y\", \"x\", \"z\"])\nshape: (2, 3)\n+---+-------+-------+---------+\n|   | y (A) | x (B) |  z (C)  |\n+---+-------+-------+---------+\n| 1 |   4   |   1   | B1 + A1 |\n| 2 |   5   |   2   | B2 + A2 |\n+---+-------+-------+---------+\n&gt;&gt;&gt; df.select([\"x\", \"z\"])\nshape: (2, 2)\n+---+-------+--------------+\n|   | x (A) |    z (B)     |\n+---+-------+--------------+\n| 1 |   1   | A1 + ???:y:0 |\n| 2 |   2   | A2 + ???:y:1 |\n+---+-------+--------------+\n\n</code></pre>"},{"location":"excelframe/#excelify.ExcelFrame.to_excel","title":"to_excel","text":"<pre><code>to_excel(path: Path | str, *, start_pos: tuple[int, int] = (0, 0)) -&gt; None\n</code></pre> <p>Writes the ExcelFrame to <code>path</code> in an .xlsx format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>Path to write an .xlsx file to</p> required <code>start_pos</code> <code>tuple[int, int]</code> <p>Starting position of the table. It represents the table's upper left cell position.</p> <code>(0, 0)</code> <p>Returns:</p> Type Description <code>None</code> <p>None, but the file will be written to the <code>path</code>.</p>"},{"location":"excelframe/#excelify.ExcelFrame.to_json","title":"to_json","text":"<pre><code>to_json(\n    *, include_header: bool = False, start_pos: tuple[int, int] = (0, 0)\n) -&gt; Any\n</code></pre> <p>Returns a JSON that represents the ExcelFrame table. excelify-app uses it to get the JSON-formatted state of the ExcelFrame table.</p> <p>Parameters:</p> Name Type Description Default <code>include_header</code> <code>bool</code> <p>Include header in the beginning of the row if set to True</p> <code>False</code> <code>start_pos</code> <code>tuple[int, int]</code> <p>Starting position of the table. It represents the table's upper left cell position.</p> <code>(0, 0)</code> <p>Returns:</p> Type Description <code>Any</code> <p>a dict that represents JSON.</p>"},{"location":"excelframe/#excelify.ExcelFrame.transpose","title":"transpose","text":"<pre><code>transpose(\n    *,\n    include_header: bool = False,\n    header_name: str = \"column\",\n    column_names: Iterable[str] | None = None,\n) -&gt; ExcelFrame\n</code></pre> <p>Transpose the table.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2], \"y\": [3, 4]})\n&gt;&gt;&gt; df = df.with_columns((el.col(\"x\") + el.col(\"y\")).alias(\"x_plus_y\"))\n&gt;&gt;&gt; df\nshape: (2, 3)\n+---+-------+-------+--------------+\n|   | x (A) | y (B) | x_plus_y (C) |\n+---+-------+-------+--------------+\n| 1 |   1   |   3   |   A1 + B1    |\n| 2 |   2   |   4   |   A2 + B2    |\n+---+-------+-------+--------------+\n&gt;&gt;&gt; df.transpose(include_header=True)\nshape: (3, 3)\n+---+------------+--------------+--------------+\n|   | column (A) | column_0 (B) | column_1 (C) |\n+---+------------+--------------+--------------+\n| 1 |     x      |      1       |      2       |\n| 2 |     y      |      3       |      4       |\n| 3 |  x_plus_y  |   B1 + B2    |   C1 + C2    |\n+---+------------+--------------+--------------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>include_header</code> <code>bool</code> <p>Add header as a separate column if set to True.</p> <code>False</code> <code>header_name</code> <code>str</code> <p>Name of the header column if <code>include_header</code> is set to True.</p> <code>'column'</code> <code>column_names</code> <code>Iterable[str] | None</code> <p>Name of the new ExcelFrame's columns.</p> <code>None</code> <p>Returns:</p> Type Description <code>ExcelFrame</code> <p>A transposed ExcelFrame</p>"},{"location":"excelframe/#excelify.ExcelFrame.with_columns","title":"with_columns","text":"<pre><code>with_columns(*exprs: Expr, **kwargs) -&gt; Self\n</code></pre> <p>Adds or modifies an expression of the column to the table and returns a new ExcelFrame.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2]})\n&gt;&gt;&gt; df = df.with_columns(\n...     el.map(\n...         lambda idx: el.col(\"x\")\n...         if idx == 0\n...         else el.col(\"cumulative_x_sum\").prev(1) + el.col(\"x\")\n...     ).alias(\"cumulative_x_sum\"),\n...     x_times_two=el.col(\"x\") * 2\n... )\n&gt;&gt;&gt; df.select([\"x\", \"x_times_two\", \"cumulative_x_sum\"])\nshape: (2, 3)\n+---+-------+-----------------+----------------------+\n|   | x (A) | x_times_two (B) | cumulative_x_sum (C) |\n+---+-------+-----------------+----------------------+\n| 1 |   1   |     A1 * 2      |          A1          |\n| 2 |   2   |     A2 * 2      |       C1 + A2        |\n+---+-------+-----------------+----------------------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>*exprs</code> <code>Expr</code> <p>expressions to add to the ExcelFrame</p> <code>()</code> <code>**kwargs</code> <p>Column expressions whose name will be determined by the argument name.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Self</code> <p>An ExcelFrame with added/updated columns based on the passed expressions.</p>"},{"location":"excelframe/#excelify.concat","title":"concat","text":"<pre><code>concat(dfs: Iterable[ExcelFrame]) -&gt; ExcelFrame\n</code></pre> <p>Concatenates ExcelFrames along the rows into one. The cell references across the ExcelFrames will be converted to refer to cells within the outputted ExcelFrame. Cell reference outside the given ExcelFrames will still be kept as is.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df1 = el.ExcelFrame.empty(columns=[\"x\", \"y\"], height=2)\n&gt;&gt;&gt; df1 = df1.with_columns(\n...     el.lit([1, 2]).alias(\"x\"),\n...     el.lit([3, 4]).alias(\"y\"),\n... )\n&gt;&gt;&gt; df2 = el.ExcelFrame.empty(columns=[\"x\", \"y\"], height=2)\n&gt;&gt;&gt; df2 = df2.with_columns(\n...     el.col(\"x\", from_=df1).alias(\"x\"),\n...     el.col(\"y\", from_=df1).alias(\"y\"),\n... )\n&gt;&gt;&gt; el.concat([df1, df2])\nshape: (4, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |   1   |   3   |\n| 2 |   2   |   4   |\n| 3 |  A1   |  B1   |\n| 4 |  A2   |  B2   |\n+---+-------+-------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dfs</code> <code>Iterable[ExcelFrame]</code> <p>An iterable of ExcelFrames to concatenate</p> required <p>Returns:</p> Type Description <code>ExcelFrame</code> <p>A concatenated ExcelFrame</p>"},{"location":"expressions/","title":"ExcelFrame Expressions","text":""},{"location":"expressions/#excelify.Expr","title":"Expr","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract class that represents a column expression. It'll be evaluated across the row when it's applied to the ExcelFrame.</p> <p>You can apply arithmetic operations to the expression directly.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2, 3]})\n&gt;&gt;&gt; df = df.with_columns(\n...     (el.col(\"x\") * el.col(\"x\")).alias(\"x_squared\"),\n...     (el.col(\"x\") / 2).alias(\"x_div_2\")\n... )\n&gt;&gt;&gt; df\nshape: (3, 3)\n+---+-------+---------------+-------------+\n|   | x (A) | x_squared (B) | x_div_2 (C) |\n+---+-------+---------------+-------------+\n| 1 |   1   |    A1 * A1    |   A1 / 2    |\n| 2 |   2   |    A2 * A2    |   A2 / 2    |\n| 3 |   3   |    A3 * A3    |   A3 / 2    |\n+---+-------+---------------+-------------+\n\n</code></pre>"},{"location":"expressions/#excelify.Expr.alias","title":"alias","text":"<pre><code>alias(name: str) -&gt; Self\n</code></pre> <p>Name the column for the given expression.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the column</p> required <p>Returns:</p> Type Description <code>Self</code> <p>self with name modified.</p>"},{"location":"expressions/#excelify.col","title":"col","text":"<pre><code>col(col_name: str, *, from_: ExcelFrame | None = None, offset: int = 0)\n</code></pre> <p>`Expresses a reference to the cell in a specified column.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2], \"y\": [3, 4]})\n&gt;&gt;&gt; df = df.with_columns((el.col(\"x\") + el.col(\"y\")).alias(\"z\"))\n&gt;&gt;&gt; df\nshape: (2, 3)\n+---+-------+-------+---------+\n|   | x (A) | y (B) |  z (C)  |\n+---+-------+-------+---------+\n| 1 |   1   |   3   | A1 + B1 |\n| 2 |   2   |   4   | A2 + B2 |\n+---+-------+-------+---------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>col_name</code> <code>str</code> <p>Name of the column</p> required <code>from_</code> <code>ExcelFrame | None</code> <p>Which <code>ExcelFrame</code> to refer to. If it's None, it'll refer to the column of its own ExcelFrame.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Relative row offset to refer to different rows.</p> <code>0</code>"},{"location":"expressions/#excelify.map","title":"map","text":"<pre><code>map(fn: Callable[[int], CellExpr | RawInput | Expr]) -&gt; Map\n</code></pre> <p>Creates an expression based on the given function <code>fn</code> per row.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame.empty(columns=[\"x\", \"y\"], height=2)\n&gt;&gt;&gt; df = df.with_columns(\n...     el.map(lambda idx: idx + 1).alias(\"x\"),\n...     el.map(lambda idx: idx * 2).alias(\"y\")\n... )\n&gt;&gt;&gt; df\nshape: (2, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |   1   |   0   |\n| 2 |   2   |   2   |\n+---+-------+-------+\n\n</code></pre> <p>Arguments:     fn: A callable that takes row index and returns an expression for         the row.</p> <p>Returns:</p> Type Description <code>Map</code> <p>A <code>Map</code> expression.</p>"},{"location":"expressions/#excelify.lit","title":"lit","text":"<pre><code>lit(value: RawInput | Sequence[RawInput | Expr | None]) -&gt; Expr\n</code></pre> <p>Expresses a constant value across the rows.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame.empty(columns=[\"x\", \"y\"], height=2)\n&gt;&gt;&gt; df = df.with_columns(\n...     el.lit(0).alias(\"x\"),\n...     el.lit([1, 2]).alias(\"y\")\n... )\n&gt;&gt;&gt; df\nshape: (2, 2)\n+---+-------+-------+\n|   | x (A) | y (B) |\n+---+-------+-------+\n| 1 |   0   |   1   |\n| 2 |   0   |   2   |\n+---+-------+-------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>RawInput | Sequence[RawInput | Expr | None]</code> <p>A constant value to put in the cell. If it's a scalar value, the value will be broadcasted.</p> required"},{"location":"expressions/#excelify.sum","title":"sum","text":"<pre><code>sum(col_name: str, *, from_: ExcelFrame | None = None)\n</code></pre> <p>Create an expression that represents the sum of the column. The value will be broadcasted across the row.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2, 3]})\n&gt;&gt;&gt; df = df.with_columns(el.sum(\"x\").alias(\"x_sum\"))\n&gt;&gt;&gt; df\nshape: (3, 2)\n+---+-------+------------+\n|   | x (A) | x_sum (B)  |\n+---+-------+------------+\n| 1 |   1   | SUM(A1:A3) |\n| 2 |   2   | SUM(A1:A3) |\n| 3 |   3   | SUM(A1:A3) |\n+---+-------+------------+\n&gt;&gt;&gt; df.evaluate()\nshape: (3, 2)\n+---+-------+-----------+\n|   | x (A) | x_sum (B) |\n+---+-------+-----------+\n| 1 |   1   |     6     |\n| 2 |   2   |     6     |\n| 3 |   3   |     6     |\n+---+-------+-----------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>col_name</code> <code>str</code> <p>Column name</p> required <code>from_</code> <code>ExcelFrame | None</code> <p>An ExcelFrame to refer to. If None, it'll refer to itself.</p> <code>None</code>"},{"location":"expressions/#excelify.average","title":"average","text":"<pre><code>average(col_name: str, *, from_: ExcelFrame | None = None)\n</code></pre> <p>Create an expression that represents the average of the column. The value will be broadcasted across the row.</p> Example <pre><code>&gt;&gt;&gt; import excelify as el\n&gt;&gt;&gt; df = el.ExcelFrame({\"x\": [1, 2, 3]})\n&gt;&gt;&gt; df = df.with_columns(el.average(\"x\").alias(\"x_sum\"))\n&gt;&gt;&gt; df\nshape: (3, 2)\n+---+-------+----------------+\n|   | x (A) |   x_sum (B)    |\n+---+-------+----------------+\n| 1 |   1   | AVERAGE(A1:A3) |\n| 2 |   2   | AVERAGE(A1:A3) |\n| 3 |   3   | AVERAGE(A1:A3) |\n+---+-------+----------------+\n&gt;&gt;&gt; df.evaluate()\nshape: (3, 2)\n+---+-------+-----------+\n|   | x (A) | x_sum (B) |\n+---+-------+-----------+\n| 1 |   1   |    2.0    |\n| 2 |   2   |    2.0    |\n| 3 |   3   |    2.0    |\n+---+-------+-----------+\n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>col_name</code> <code>str</code> <p>Column name</p> required <code>from_</code> <code>ExcelFrame | None</code> <p>An ExcelFrame to refer to. If None, it'll refer to itself.</p> <code>None</code>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Coming soon!</p>"},{"location":"save_and_load/","title":"Save &amp; Load","text":""},{"location":"save_and_load/#excelify.to_excel","title":"to_excel","text":"<pre><code>to_excel(\n    dfs: Sequence[tuple[ExcelFrame, tuple[int, int]]],\n    path: Path,\n    *,\n    index_path: Path | None = None,\n    sheet_styler: SheetStyler | None = None,\n) -&gt; None\n</code></pre> <p>Writes possibly more than one ExcelFrames to an excel file to a given <code>path</code>. Specify <code>index_path</code> to write down the location index of the ExcelFrames to use it for loading them from the .xlsx file in the future.</p> <p>Parameters:</p> Name Type Description Default <code>dfs</code> <code>Sequence[tuple[ExcelFrame, tuple[int, int]]]</code> <p>Sequence of ExcelFrames and its starting positions, zero-indexed.</p> required <code>path</code> <code>Path</code> <p>Path of an .xlsx file</p> required <code>index_path</code> <code>Path | None</code> <p>Path of an index JSON file</p> <code>None</code>"},{"location":"save_and_load/#excelify.of_excel","title":"of_excel","text":"<pre><code>of_excel(*, path: Path | str, index_path: Path | str) -&gt; Sequence[ExcelFrame]\n</code></pre> <p>Loads possibly more than one ExcelFrames from an .xlsx file from a given <code>path</code> and <code>index_path</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>.xlsx file Path to load from</p> required <code>index_path</code> <code>Path | str</code> <p>Index JSON file path that specifies the location of the df's to load.</p> required <p>Returns:</p> Type Description <code>Sequence[ExcelFrame]</code> <p>A sequence of ExcelFrame, ordered based on the index path.</p>"},{"location":"save_and_load/#excelify.of_csv","title":"of_csv","text":"<pre><code>of_csv(path: Path | str) -&gt; ExcelFrame\n</code></pre> <p>Loads an ExcelFrame from a csv file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>CSV file path</p> required <p>Returns:</p> Type Description <code>ExcelFrame</code> <p>An ExcelFrame</p>"}]}